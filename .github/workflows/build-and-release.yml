name: Build and Release Protobuf

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win64
            script: .\build.bat
            artifact_name: protobuf-win64
            artifact_path: install-win64
          - os: ubuntu-latest
            platform: linux-x86_64
            script: ./build.sh
            artifact_name: protobuf-linux-x86_64
            artifact_path: install-linux-x86_64
          - os: macos-13  # Intel
            platform: macos-x86_64
            script: ./build.sh
            artifact_name: protobuf-macos-x86_64
            artifact_path: install-macos-x86_64
          - os: macos-14  # Apple Silicon
            platform: macos-arm64
            script: ./build.sh
            artifact_name: protobuf-macos-arm64
            artifact_path: install-macos-arm64
          - os: macos-14  # Universal Binary
            platform: macos-universal
            script: ./build-universal.sh
            artifact_name: protobuf-macos-universal
            artifact_path: install-macos-universal

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.22'

    - name: Set up MSVC (Windows only)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    - name: Install build dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install build dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # Ensure Xcode command line tools are available
        xcode-select --install || true

    - name: Make build script executable (Unix)
      if: runner.os != 'Windows'
      run: chmod +x build.sh

    - name: Build protobuf (Windows)
      if: runner.os == 'Windows'
      run: ${{ matrix.script }}
      shell: cmd

    - name: Build protobuf (Unix)
      if: runner.os != 'Windows'
      run: ${{ matrix.script }}
      shell: bash

    - name: Create archive
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          7z a ${{ matrix.artifact_name }}.zip ${{ matrix.artifact_path }}/*
        else
          tar -czf ${{ matrix.artifact_name }}.tar.gz -C ${{ matrix.artifact_path }} .
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.zip
          ${{ matrix.artifact_name }}.tar.gz
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.zip" -o -name "*.tar.gz" | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Protobuf Libraries and Headers
          
          This release contains pre-built protobuf libraries and headers for multiple platforms:
          
          - **Windows (x64)**: `protobuf-win64.zip`
          - **Linux (x86_64)**: `protobuf-linux-x86_64.tar.gz`
          - **macOS (Universal)**: `protobuf-macos-universal.tar.gz` ‚≠ê *Recommended - works on both Intel and Apple Silicon*
          - **macOS (Intel only)**: `protobuf-macos-x86_64.tar.gz`
          - **macOS (Apple Silicon only)**: `protobuf-macos-arm64.tar.gz`
          
          Each archive contains:
          - Static libraries (`.lib` on Windows, `.a` on Unix)
          - Header files for C++ development
          - Protocol compiler (`protoc`) binary
          
          ## Usage
          
          1. Download the appropriate archive for your platform
          2. Extract to your project directory
          3. Link against the static libraries in your build system
          4. Include the header files in your C++ code
          
          ## Build Information
          
          - Built with CMake
          - Static linking enabled
          - Tests and examples disabled for smaller size
          - No external dependencies (zlib disabled)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
