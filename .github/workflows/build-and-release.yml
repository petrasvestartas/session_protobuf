name: Build and Release Protobuf

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# Required permissions for creating releases
permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows build
          - os: windows-latest
            platform: win64
            script: .\build.bat
            artifact_name: protobuf-win64
          
          # Linux build (compatible with most distributions)
          - os: ubuntu-latest
            platform: linux-x86_64
            script: ./build.sh
            artifact_name: protobuf-linux-x86_64
          
          # macOS Universal build (works on both Intel and Apple Silicon)
          - os: macos-14
            platform: macos-universal
            script: ./build.sh
            artifact_name: protobuf-macos-universal

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Make build script executable (Unix)
      if: runner.os != 'Windows'
      run: chmod +x build.sh

    - name: Run build and generate (Windows)
      if: runner.os == 'Windows'
      run: ${{ matrix.script }}
      shell: cmd

    - name: Run build and generate (Unix)
      if: runner.os != 'Windows'
      run: ${{ matrix.script }}
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          *.zip
          *.tar.gz
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.zip" -o -name "*.tar.gz" | while read file; do
          cp "$file" release-assets/
        done
        
        # Include common proto files
        if [ -d "proto" ]; then
          tar -czf release-assets/common-proto-files.tar.gz proto/
        fi
        
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Protobuf Libraries and Headers
          
          This release contains pre-built protobuf libraries and headers for multiple platforms:
          
          ### Platform Binaries
          - **Windows (x64)**: `protobuf-win64.zip`
          - **Linux (x86_64)**: `protobuf-linux-x86_64.tar.gz` - Compatible with most Linux distributions
          - **macOS Universal**: `protobuf-macos-universal.tar.gz` ⭐ Works on both Intel and Apple Silicon
          
          ### Language Bindings (Ready-to-Use Code)
          - **C++ Bindings**: `cpp-bindings.tar.gz` - Pre-generated .h and .cc files
          - **Python Bindings**: `python-bindings.tar.gz` - Pre-generated _pb2.py modules  
          - **Rust Bindings**: `rust-bindings.tar.gz` - Ready-to-use Cargo crate
          - **Common Proto Files**: `common-proto-files.tar.gz` - Google well-known types
          
          Each archive contains:
          - Static libraries (`.lib` on Windows, `.a` on Unix)
          - Header files for C++ development
          - Protocol compiler (`protoc`) binary
          
          ## Usage
          
          ### For Building Applications
          1. Download the platform binary (protobuf-*.zip/tar.gz)
          2. Extract to your project directory
          3. Link against the static libraries in your build system
          4. Include the header files in your C++ code
          
          ### For Language Bindings (Avoid 3rd Party Dependencies)
          1. Download the language-specific bindings archive
          2. **C++**: Include .h files, compile .cc files with your project
          3. **Python**: Import the _pb2.py modules directly
          4. **Rust**: Use as a Cargo crate dependency
          
          ⭐ **No external protobuf library needed** - everything is self-contained!
          
          ## Build Information
          
          - Built with CMake
          - Static linking enabled
          - Tests and examples disabled for smaller size
          - No external dependencies (zlib disabled)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
